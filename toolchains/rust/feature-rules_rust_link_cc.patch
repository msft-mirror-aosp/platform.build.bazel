From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Zach Yu <zachyu@google.com>
Date: Wed, 3 Jul 2024 16:07:37 -0700
Subject: Introduce feature `rules_rust_link_cc`.

This feature is similar to `rules_rust_unsupported_feature`. The difference is that, `rules_rust_unsupported_feature` gets disabled if *any* rust is involved, while this feature gets disabled if *only* rust is involved.

My use case for this feature is to static link to c++ / objc stdlibs. They are needed only when any C object is being linked, and will produce invalid rust_proc_macro if linked blindly.

diff --git a/rust/private/rustc.bzl b/rust/private/rustc.bzl
index 6dbb258b..39df5aac 100644
--- a/rust/private/rustc.bzl
+++ b/rust/private/rustc.bzl
@@ -40,6 +40,12 @@ load(
 )
 load(":utils.bzl", "is_std_dylib")
 
+# This feature is disabled unless one of the dependencies is a cc_library.
+# Authors of C++ toolchains can place linker flags that should only be applied
+# when linking with C objects in a feature with this name, or require this
+# feature from other features which needs to be disabled together.
+RUST_LINK_CC_FEATURE = "rules_rust_link_cc"
+
 BuildInfo = _BuildInfo
 
 AliasableDepInfo = provider(
@@ -1149,7 +1155,10 @@ def rustc_compile_action(
     rustc_output = crate_info_dict.get("rustc_output", None)
     rustc_rmeta_output = crate_info_dict.get("rustc_rmeta_output", None)
 
-    cc_toolchain, feature_configuration = find_cc_toolchain(ctx)
+    extra_disabled_features = [RUST_LINK_CC_FEATURE]
+    if crate_info_dict["type"] in ["bin", "cdylib"] and any([d.cc_info for d in crate_info_dict["deps"].to_list()]):
+        extra_disabled_features = []
+    cc_toolchain, feature_configuration = find_cc_toolchain(ctx, extra_disabled_features)
 
     # Determine whether to use cc_common.link:
     #  * either if experimental_use_cc_common_link is 1,
diff --git a/rust/private/utils.bzl b/rust/private/utils.bzl
index 57a3fe7a..c09fbf89 100644
--- a/rust/private/utils.bzl
+++ b/rust/private/utils.bzl
@@ -41,11 +41,12 @@ def find_toolchain(ctx):
     """
     return ctx.toolchains[Label("//rust:toolchain_type")]
 
-def find_cc_toolchain(ctx):
+def find_cc_toolchain(ctx, extra_unsupported_features = tuple()):
     """Extracts a CcToolchain from the current target's context
 
     Args:
         ctx (ctx): The current target's rule context object
+        extra_unsupported_features (sequence of str): Extra featrures to disable
 
     Returns:
         tuple: A tuple of (CcToolchain, FeatureConfiguration)
@@ -56,7 +57,8 @@ def find_cc_toolchain(ctx):
         ctx = ctx,
         cc_toolchain = cc_toolchain,
         requested_features = ctx.features,
-        unsupported_features = UNSUPPORTED_FEATURES + ctx.disabled_features,
+        unsupported_features = UNSUPPORTED_FEATURES + ctx.disabled_features +
+                               list(extra_unsupported_features),
     )
     return cc_toolchain, feature_configuration
 
-- 
2.45.2.803.g4e1b14247a-goog

