load(
    "@//build/bazel/toolchains/cc:rules.bzl",
    "cc_artifact_name",
    "cc_toolchain_config",
    "cc_toolchain_dynamic_runtime",
    "cc_toolchain_static_runtime",
)
load(":features.bzl", "cc_features")

package(default_visibility = ["//visibility:public"])

_imports = [
    "@clang//:macos_all_libcxx",
    "@macos_sdk//:frameworks",
]

cc_features(
    name = "x64_features",
    compile_flags = [
        "--target=x86_64-apple-darwin-macho",
        "-no-canonical-prefixes",
        "-Wno-builtin-macro-redefined",
        "-D__DATE__=\"redacted\"",
        "-D__TIMESTAMP__=\"redacted\"",
        "-D__TIME__=\"redacted\"",
    ],
    cxx_flags = ["-std=c++20"],
    link_flags = [
        "--target=x86_64-apple-darwin-macho",
        "-undefined dynamic_lookup",
        "-fobjc-link-runtime",
        "-fuse-ld=lld",
    ],
    toolchain_imports = _imports,
)

cc_artifact_name(
    name = "dylib",
    category = "dynamic_library",
    extension = ".dylib",
    prefix = "lib",
)

cc_toolchain_config(
    name = "x64_config",
    artifact_name_patterns = [":dylib"],
    cc_features = ":x64_features",
    cc_tools = [
        "@clang//:macos_all_clang",
        "@clang//:macos_all_clang++",
        "@clang//:macos_all_archiver",
        "@clang//:macos_all_strip",
    ],
    identifier = "macos_clang_x64",
    sysroot = "@macos_sdk//:sdk",
    target_cpu = "k8",
    toolchain_imports = _imports,
)

cc_toolchain_dynamic_runtime(
    name = "dynamic_runtime",
    libs = _imports,
)

cc_toolchain_static_runtime(
    name = "static_runtime",
    libs = _imports,
)

cc_toolchain(
    name = "x64",
    all_files = ":x64_config",
    ar_files = "@clang//:macos_all_archiver",
    as_files = "@clang//:macos_all_clang",
    compiler_files = ":x64_config",
    dwp_files = "@//build/bazel/toolchains/cc:empty",
    dynamic_runtime_lib = ":dynamic_runtime",
    linker_files = ":x64_config",
    objcopy_files = "@//build/bazel/toolchains/cc:empty",
    static_runtime_lib = ":static_runtime",
    strip_files = "@clang//:macos_all_strip",
    supports_param_files = 1,
    toolchain_config = ":x64_config",
)

toolchain(
    name = "x64_toolchain",
    exec_compatible_with = [
        "@platforms//os:macos",
        "@bazel_tools//tools/cpp:clang",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:macos",
    ],
    toolchain = ":x64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

cc_features(
    name = "arm64_features",
    compile_flags = [
        "--target=arm64-apple-darwin-macho",
        "-no-canonical-prefixes",
        "-Wno-builtin-macro-redefined",
        "-D__DATE__=\"redacted\"",
        "-D__TIMESTAMP__=\"redacted\"",
        "-D__TIME__=\"redacted\"",
    ],
    cxx_flags = ["-std=c++20"],
    link_flags = [
        "--target=arm64e-apple-darwin-macho",
        "-undefined dynamic_lookup",
        "-fobjc-link-runtime",
        "-fuse-ld=lld",
    ],
    toolchain_imports = _imports,
)

cc_toolchain_config(
    name = "arm64_config",
    artifact_name_patterns = [":dylib"],
    cc_features = ":arm64_features",
    cc_tools = [
        "@clang//:macos_all_clang",
        "@clang//:macos_all_clang++",
        "@clang//:macos_all_archiver",
        "@clang//:macos_all_strip",
    ],
    identifier = "macos_clang_arm64",
    sysroot = "@macos_sdk//:sdk",
    target_cpu = "arm64",
    toolchain_imports = _imports,
)

cc_toolchain(
    name = "arm64",
    all_files = ":arm64_config",
    ar_files = "@clang//:macos_all_archiver",
    as_files = "@clang//:macos_all_clang",
    compiler_files = ":arm64_config",
    dwp_files = "@//build/bazel/toolchains/cc:empty",
    dynamic_runtime_lib = ":dynamic_runtime",
    linker_files = ":arm64_config",
    objcopy_files = "@//build/bazel/toolchains/cc:empty",
    static_runtime_lib = ":static_runtime",
    strip_files = "@clang//:macos_all_strip",
    supports_param_files = 1,
    toolchain_config = ":arm64_config",
)

toolchain(
    name = "arm64_toolchain",
    exec_compatible_with = [
        "@platforms//os:macos",
        "@bazel_tools//tools/cpp:clang",
    ],
    target_compatible_with = [
        "@platforms//cpu:arm64",
        "@platforms//os:macos",
    ],
    toolchain = ":arm64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)
