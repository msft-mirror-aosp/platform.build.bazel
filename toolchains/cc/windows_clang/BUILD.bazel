load(
    "@//build/bazel/toolchains/cc:rules.bzl",
    "cc_artifact_name",
    "cc_toolchain_config",
)
load("@rules_cc//cc:defs.bzl", "cc_toolchain")
load(":features.bzl", "cc_features")

package(default_visibility = ["//visibility:public"])

_x64_imports_msvc = [
    "@vctools//:msvc_runtimes_x64",
    "@windows_sdk//:sdk_libs_x64",
    "@clang_win_x64//:compiler_runtime",
]

_x64_imports_gnu = [
    "@mingw64//:mingw_libs_x64",
]

cc_features(
    name = "x64_features",
    archive_flags = ["/ignore:4221"],
    assembler_flags = [
        "/Zd",  # Add line number debug info
        "/Zi",  # Add symbolic debug info
    ],
    compile_flags =
        [
            "/wd4117",  # #pragma pragma should be at global scope
            "/wd4351",  # nonstandard extension used: zero size arrays are deprecated
            "/wd4291",  # C++ exception specification used to terminate unexpected()
            "/wd4250",  # base class '...' has virtual functions but is not virtual
            "/wd4996",  # '...' is deprecated
            "-Wno-builtin-macro-redefined",  # Ignore clang-cl defined warnings
            "-Wno-macro-redefined",  # We force define a large set windows settings
            "--target=x86_64-pc-windows-msvc",
            # Do not expand any symbolic links, resolve references to ‘/../’ or ‘/./’, or make
            # the path absolute when generating a relative prefix.
            "-no-canonical-prefixes",
            # Use standard c++ exception handling
            # https://learn.microsoft.com/en-us/cpp/build/reference/eh-exception-handling-model?view=msvc-170#standard-c-exception-handling
            "/EHsc",
        ],
    compiler_defines_flags = [
        # Improves compatibility with older or embedded systems where atomics might not be supported or efficient.
        "/D__STDC_NO_ATOMICS__",
        # This is often done for reproducible builds, as the date would otherwise change with each build.
        "/D__DATE__=\"redacted\"",
        "/D__TIMESTAMP__=\"redacted\"",
        "/D__TIME__=\"redacted\"",
        "/DCOMPILER_MSVC",  # Identify as MSVC cl
        "/DNOMINMAX",  # Disables the min/max macros defined in <windows.h>.
        "/DWIN32_LEAN_AND_MEAN",  # Excludes less frequently used headers from <windows.h>.
        "/D_WIN32_WINNT=0x0A00",  # Sets the target Windows version to Windows 10.
        "/DWINVER=0x0A00",
        "/DNTDDI_VERSION=0x0A000006",  # NTDDI_WIN10_RS5 (EOL October 14, 2025)
        "/DUNICODE",  # Enable WIN32 Unicode API
        "/D_UNICODE",  # Enable Unicode CRT
        "/D_CRT_SECURE_NO_DEPRECATE",  # Suppresses warnings about using deprecated CRT functions.
        "/D_CRT_SECURE_NO_WARNINGS",  # Suppresses warnings related to potentially insecure CRT functions (e.g., strcpy).
        # https://stackoverflow.com/questions/79195142/recent-msvc-versions-dont-treat-nan-as-constant-workaround
        "/D_UCRT_NOISY_NAN",
    ],
    cxx_flags = ["/std:c++17"],
    link_flags_msvc = ["/ignore:4070"],
    toolchain_imports_gnu = _x64_imports_gnu,
    toolchain_imports_msvc = _x64_imports_msvc,
)

cc_artifact_name(
    name = "obj",
    category = "object_file",
    extension = ".obj",
)

cc_artifact_name(
    name = "lib",
    category = "static_library",
    extension = ".lib",
)

cc_artifact_name(
    name = "always_link_lib",
    category = "alwayslink_static_library",
    extension = ".lo.lib",
)

cc_artifact_name(
    name = "exe",
    category = "executable",
    extension = ".exe",
)

cc_artifact_name(
    name = "dll",
    category = "dynamic_library",
    extension = ".dll",
)

cc_artifact_name(
    name = "interface_lib",
    category = "interface_library",
    extension = ".if.lib",
)

cc_toolchain_config(
    name = "x64_config",
    artifact_name_patterns = [
        ":obj",
        ":lib",
        ":always_link_lib",
        ":exe",
        ":dll",
        ":interface_lib",
    ],
    cc_features = ":x64_features",
    cc_tools = [
        "@clang_win_x64//:clang-cl",
        "@clang_win_x64//:link",
        "@clang_win_x64//:archiver",
        "@vctools//:ml64",
    ],
    compiler_name = "clang-cl",
    identifier = "win_clangcl_x64",
    target_cpu = "k8",
    toolchain_imports = _x64_imports_msvc + _x64_imports_gnu,
)

cc_toolchain(
    name = "x64",
    all_files = ":x64_config",
    ar_files = "@clang_win_x64//:archiver",
    as_files = "@vctools//:ml64",
    compiler_files = ":x64_config",
    dwp_files = "@//build/bazel/toolchains/cc:empty",
    linker_files = ":x64_config",
    objcopy_files = "@//build/bazel/toolchains/cc:empty",
    strip_files = "@//build/bazel/toolchains/cc:empty",
    supports_param_files = 1,
    toolchain_config = ":x64_config",
)

toolchain(
    name = "x64_toolchain",
    exec_compatible_with = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
        "@bazel_tools//tools/cpp:clang-cl",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
    ],
    toolchain = ":x64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

toolchain_type(
    name = "resource_compiler_toolchain_type",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "resource_compiler_x64",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
    ],
    toolchain = "@windows_sdk//:resource_compiler_toolchain_x64",
    toolchain_type = ":resource_compiler_toolchain_type",
)
